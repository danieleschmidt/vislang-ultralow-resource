version: '3.8'

services:
  # Main application service
  vislang-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: vislang-ultralow-app
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - DATABASE_URL=postgresql://vislang:vislang_password@postgres:5432/vislang_db
      - REDIS_URL=redis://redis:6379/0
      - HUGGINGFACE_HUB_CACHE=/app/cache/huggingface
      - TRANSFORMERS_CACHE=/app/cache/transformers
    volumes:
      - .:/app
      - vislang-cache:/app/cache
      - vislang-data:/app/data
      - vislang-logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - vislang-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database for metadata and annotations
  postgres:
    image: postgres:15-alpine
    container_name: vislang-postgres
    environment:
      POSTGRES_DB: vislang_db
      POSTGRES_USER: vislang
      POSTGRES_PASSWORD: vislang_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - vislang-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vislang -d vislang_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: vislang-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - vislang-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Jupyter notebook for development and experimentation
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: vislang-jupyter
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - DATABASE_URL=postgresql://vislang:vislang_password@postgres:5432/vislang_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - .:/app
      - vislang-cache:/app/cache
      - vislang-data:/app/data
      - ./notebooks:/app/notebooks
    depends_on:
      - postgres
      - redis
    networks:
      - vislang-network

  # MinIO for object storage (model artifacts, datasets)
  minio:
    image: minio/minio:latest
    container_name: vislang-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    networks:
      - vislang-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: vislang-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - vislang-network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: vislang-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - vislang-network
    profiles:
      - monitoring

volumes:
  postgres-data:
  redis-data:
  minio-data:
  prometheus-data:
  grafana-data:
  vislang-cache:
  vislang-data:
  vislang-logs:

networks:
  vislang-network:
    driver: bridge
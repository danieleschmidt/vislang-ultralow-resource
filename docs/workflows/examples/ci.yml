name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  MIN_COVERAGE: 80

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Cache pre-commit
      uses: actions/cache@v3
      with:
        path: ~/.cache/pre-commit
        key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

    - name: Run pre-commit hooks
      run: pre-commit run --all-files

    - name: Check import sorting
      run: isort --check-only --diff .

    - name: Check code formatting
      run: black --check --diff .

    - name: Lint with flake8
      run: flake8 src/ tests/

    - name: Type checking with mypy
      run: mypy src/

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/

    - name: Run Safety vulnerability check
      run: safety check --json --output safety-report.json

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: python

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
        exclude:
          # Reduce matrix size for faster builds
          - os: macos-latest
            python-version: "3.8"
          - os: windows-latest
            python-version: "3.8"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-ara tesseract-ocr-fra
        sudo apt-get install -y libpoppler-cpp-dev

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract poppler

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Note: Tesseract installation on Windows requires additional setup
        choco install tesseract

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,ocr,training]"

    - name: Run unit tests
      run: pytest tests/unit/ -v --cov=src/vislang_ultralow --cov-report=xml

    - name: Run integration tests
      run: pytest tests/integration/ -v --cov=src/vislang_ultralow --cov-append --cov-report=xml

    - name: Check coverage threshold
      run: |
        coverage report --fail-under=${{ env.MIN_COVERAGE }}

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == env.PYTHON_VERSION
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  build-and-test-package:
    name: Build and Test Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Check package
      run: twine check dist/*

    - name: Test package installation
      run: |
        pip install dist/*.whl
        python -c "import vislang_ultralow; print('Package imported successfully')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-distributions
        path: dist/

  integration-test:
    name: End-to-End Integration Tests
    runs-on: ubuntu-latest
    needs: [build-and-test-package]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: vislang_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/vislang_test
      REDIS_URL: redis://localhost:6379/0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-ara tesseract-ocr-fra
        sudo apt-get install -y libpoppler-cpp-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,ocr,training]"

    - name: Wait for services
      run: |
        timeout 60s bash -c 'until nc -z localhost 5432; do sleep 1; done'
        timeout 60s bash -c 'until nc -z localhost 6379; do sleep 1; done'

    - name: Run database migrations
      run: |
        # Add database setup commands here when available
        echo "Database setup would go here"

    - name: Run end-to-end tests
      run: pytest tests/e2e/ -v --tb=short

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          tests/e2e/reports/
          tests/e2e/screenshots/

  notify-on-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [lint-and-format, test, security-scan, build-and-test-package, integration-test]
    if: failure() && github.ref == 'refs/heads/main'
    steps:
    - name: Notify team of CI failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#engineering-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ðŸš¨ CI Pipeline Failed on main branch
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
          Link: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
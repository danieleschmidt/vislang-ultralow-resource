name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      pre_release:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  id-token: write

env:
  PYTHON_VERSION: "3.11"

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Determine version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
          IS_PRERELEASE="${{ github.event.inputs.pre_release }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
          # Check if version contains pre-release indicators
          if [[ $VERSION =~ (alpha|beta|rc|dev) ]]; then
            IS_PRERELEASE=true
          else
            IS_PRERELEASE=false
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION (pre-release: $IS_PRERELEASE)"

    - name: Validate version format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "❌ Invalid version format: ${{ steps.version.outputs.version }}"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi

    - name: Check if tag exists
      if: github.event_name == 'workflow_dispatch'
      run: |
        if git rev-parse "${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
          echo "❌ Tag ${{ steps.version.outputs.version }} already exists"
          exit 1
        fi

  run-full-ci:
    name: Run Full CI Pipeline
    uses: ./.github/workflows/ci.yml
    needs: validate-release

  security-scan:
    name: Security Scan for Release
    uses: ./.github/workflows/security.yml
    needs: validate-release

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate-release, run-full-ci, security-scan]
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine sigstore

    - name: Update version in pyproject.toml
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        # Remove 'v' prefix for Python version
        PYTHON_VERSION=${VERSION#v}
        sed -i "s/version = \".*\"/version = \"$PYTHON_VERSION\"/" pyproject.toml

    - name: Build source and wheel distributions
      run: |
        python -m build
        ls -la dist/

    - name: Check distributions
      run: twine check dist/*

    - name: Generate hashes
      id: hash
      run: |
        cd dist
        echo "hashes=$(sha256sum * | base64 -w0)" >> $GITHUB_OUTPUT

    - name: Sign artifacts with Sigstore
      run: |
        for file in dist/*; do
          sigstore sign "$file"
        done

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          dist/
          *.sig

  generate-sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install cyclonedx-bom

    - name: Generate SBOM
      run: |
        cyclonedx-py -o sbom.json
        cyclonedx-py -o sbom.xml --format xml
        cyclonedx-py -o sbom.spdx --format spdxjson

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom-files
        path: |
          sbom.json
          sbom.xml
          sbom.spdx

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, generate-sbom]
    environment: release
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v3

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [[ -n "$LAST_TAG" ]]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
        else
          CHANGELOG="Initial release"
        fi
        
        # Save changelog to file for multiline handling
        cat << EOF > changelog.md
        ## What's Changed
        
        $CHANGELOG
        
        ## Installation
        
        \`\`\`bash
        pip install vislang-ultralow-resource==${{ needs.validate-release.outputs.version }}
        \`\`\`
        
        ## Verification
        
        All artifacts are signed with Sigstore. Verify with:
        \`\`\`bash
        sigstore verify --bundle <artifact>.sig <artifact>
        \`\`\`
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ needs.validate-release.outputs.version }}
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: Release ${{ needs.validate-release.outputs.version }}
        body_path: changelog.md
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
        files: |
          release-artifacts/*
          sbom-files/*
        generate_release_notes: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [create-release]
    environment: pypi
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install twine
      run: pip install twine

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*.whl dist/*.tar.gz

  publish-container:
    name: Publish Container Image
    runs-on: ubuntu-latest
    needs: [create-release]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        target: production
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [publish-pypi]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Update README badges
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        sed -i "s/version-[^-]*-/version-${VERSION#v}-/" README.md

    - name: Generate API documentation
      run: |
        # Add API doc generation here if using sphinx/mkdocs
        echo "API documentation generation would go here"

    - name: Commit documentation updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --staged --quiet || git commit -m "docs: update for release ${{ needs.validate-release.outputs.version }}"
        git push

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, publish-pypi, publish-container, update-documentation]
    if: always()
    steps:
    - name: Determine status
      id: status
      run: |
        if [[ "${{ needs.publish-pypi.result }}" == "success" && "${{ needs.publish-container.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ Release ${{ needs.validate-release.outputs.version }} published successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ Release ${{ needs.validate-release.outputs.version }} failed to publish" >> $GITHUB_OUTPUT
        fi

    - name: Notify team
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ steps.status.outputs.status }}
        channel: '#releases'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        message: |
          ${{ steps.status.outputs.message }}
          
          📦 **Package**: vislang-ultralow-resource
          🏷️ **Version**: ${{ needs.validate-release.outputs.version }}
          🔗 **Release**: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}
          📊 **Workflow**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  post-release-validation:
    name: Post-Release Validation
    runs-on: ubuntu-latest
    needs: [publish-pypi, publish-container]
    steps:
    - name: Wait for PyPI propagation
      run: sleep 300  # Wait 5 minutes for PyPI to propagate

    - name: Test PyPI installation
      run: |
        pip install vislang-ultralow-resource==${{ needs.validate-release.outputs.version }}
        python -c "import vislang_ultralow; print(f'Successfully installed version: {vislang_ultralow.__version__}')"

    - name: Test container image
      run: |
        docker run --rm ghcr.io/${{ github.repository }}:${{ needs.validate-release.outputs.version }} python -c "import vislang_ultralow; print('Container working')"

    - name: Create validation issue if failed
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `🚨 Post-release validation failed for ${{ needs.validate-release.outputs.version }}`,
            body: `
            ## Post-Release Validation Failure
            
            The post-release validation for version ${{ needs.validate-release.outputs.version }} has failed.
            
            **Workflow Run**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ### Action Required
            1. Check PyPI package availability and functionality
            2. Verify container image is working correctly
            3. Investigate any installation or import issues
            4. Consider hotfix release if critical issues found
            
            **Priority**: High
            `,
            labels: ['release', 'bug', 'high-priority']
          });
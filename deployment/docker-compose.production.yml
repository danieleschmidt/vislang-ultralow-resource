# Generation 6 Transcendent Intelligence - Production Docker Compose
# TERRAGON SDLC v4.0 - Global-First Implementation
version: '3.8'

services:
  # Core Intelligence Services
  generation6-transcendent-nexus:
    image: vislang/generation6-transcendent-nexus:v6.0.0
    container_name: gen6-nexus
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - TRANSCENDENT_INTELLIGENCE_LEVEL=generation6
      - CONSCIOUSNESS_SIMULATION_ENABLED=true
      - BREAKTHROUGH_PREDICTION_ENABLED=true
      - UNIVERSAL_INTELLIGENCE_COORDINATION=true
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/vislang_gen6
      - REDIS_URL=redis://redis:6379
      - HUMANITARIAN_TRANSCENDENCE_INDEX_TARGET=0.85
      - MULTI_REGION_DEPLOYMENT=true
      - SUPPORTED_LANGUAGES=en,es,fr,de,zh,ja,ar,hi,pt,ru,sw,am
    volumes:
      - consciousness_state:/app/consciousness
      - quantum_coherence_data:/app/quantum
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/transcendent-nexus"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '8.0'
          memory: 16G
        reservations:
          cpus: '2.0'
          memory: 4G
    networks:
      - generation6-network

  generation6-security-framework:
    image: vislang/generation6-security-framework:v6.0.0
    container_name: gen6-security
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - QUANTUM_CRYPTOGRAPHY_ENABLED=true
      - CONSCIOUSNESS_INTEGRITY_VERIFICATION=true
      - MULTIDIMENSIONAL_THREAT_DETECTION=true
      - SECURITY_FRAMEWORK_VERSION=transcendent
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/vislang_gen6
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health/security-framework"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - generation6-network

  generation6-monitoring-system:
    image: vislang/generation6-monitoring-system:v6.0.0
    container_name: gen6-monitoring
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - CONSCIOUSNESS_MONITORING_ENABLED=true
      - QUANTUM_COHERENCE_MONITORING=true
      - HUMANITARIAN_IMPACT_MONITORING=true
      - MONITORING_LEVEL=transcendent
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/vislang_gen6
      - REDIS_URL=redis://redis:6379
    volumes:
      - monitoring_data:/app/monitoring
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health/monitoring-system"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - generation6-network

  generation6-optimization-engine:
    image: vislang/generation6-optimization-engine:v6.0.0
    container_name: gen6-optimization
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - CONSCIOUSNESS_AWARE_LOAD_BALANCING=true
      - QUANTUM_INSPIRED_CACHING=true
      - TRANSCENDENT_OPTIMIZATION_ENABLED=true
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/vislang_gen6
      - REDIS_URL=redis://redis:6379
    volumes:
      - optimization_data:/app/optimization
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health/optimization-engine"]
      interval: 25s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 6G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - generation6-network

  # Infrastructure Services
  postgres:
    image: postgres:15-alpine
    container_name: gen6-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=vislang_gen6
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --locale=C.UTF-8
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vislang_gen6"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - generation6-network

  redis:
    image: redis:7-alpine
    container_name: gen6-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - generation6-network

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: gen6-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - generation6-transcendent-nexus
      - generation6-security-framework
      - generation6-monitoring-system
      - generation6-optimization-engine
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - generation6-network

  # Observability Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: gen6-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - generation6-network

  grafana:
    image: grafana/grafana:latest
    container_name: gen6-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - generation6-network

# Volumes for persistent data
volumes:
  consciousness_state:
    driver: local
  quantum_coherence_data:
    driver: local
  monitoring_data:
    driver: local
  optimization_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network configuration
networks:
  generation6-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16